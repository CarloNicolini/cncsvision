// This file is part of CNCSVision, a computer vision related library
// This software is developed under the grant of Italian Institute of Technology
//
// Copyright (C) 2010-2014 Carlo Nicolini <carlo.nicolini@iit.it>
//
//
// CNCSVision is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// CNCSVision is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License or the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License and a copy of the GNU General Public License along with
// CNCSVision. If not, see <http://www.gnu.org/licenses/>.

#ifndef _GLUTILS_H
#define _GLUTILS_H

#include <Eigen/Core>
#include <Eigen/Geometry>
#include <vector>
#include <map>
#include <cmath>
#include <string>
#include <iostream>

#include "IncludeGL.h"

// Standard colors
static const GLfloat glBlack[] = { 0.0, 0.0, 0.0, 0.0 };
static const GLfloat glGray25[] = { 0.25, 0.25, 0.25 };
static const GLfloat glGray50[] = { 0.5, 0.5, 0.5 };
static const GLfloat glWhite[] = { 1.0, 1.0, 1.0, 1.0 };

static const GLfloat glRed[]  = { 1.0, 0.0, 0.0, 1.0 };
static const GLfloat glYellow[]  = { 1.0, 1.0, 0.0 ,1.0};
static const GLfloat glGreen[]   = { 0.0, 1.0, 0.0 ,1.0};
static const GLfloat glCyan[] = { 0.0, 1.0, 1.0 ,1.0};
static const GLfloat glBlue[] = { 0.0, 0.0, 1.0 ,1.0};
static const GLfloat glMagenta[]= { 1.0, 0.0, 1.0 , 1.0};

static const GLfloat glRed50[]      = { 0.5, 0.0, 0.0 };
static const GLfloat glYellow50[]  = { 0.5, 0.5, 0.0 };
static const GLfloat glGreen50[]   = { 0.0, 0.5, 0.0 };
static const GLfloat glCyan50[]     = { 0.0, 0.5, 0.5 };
static const GLfloat glBlue50[]     = { 0.0, 0.0, 0.5 };
static const GLfloat glMagenta50[] = { 0.5, 0.0, 0.5 };

// Standard light from the 1,1,1 angle
static const GLfloat light0Pos[] = {1.0, 1.0, 1.0, 0.0};
// Standard light from the 1,0,1 angle
static const GLfloat light1Pos[] = {1.0, 0.0, 1.0, 0.0};
// Standard OpenGL lightining
static const GLfloat light0_diffuse[] = {1.0, 0.0, 0.0, 1.0};
static const GLfloat light0_position[] = {-1.0, 0.0, 1.0, 0.0};
static const GLfloat light1_diffuse[] = {0.0, 0.0, 1.0, 1.0};
static const GLfloat light1_position[] = {1.0, 0.0, 1.0, 0.0};

// Standard materials:
static const GLfloat standardAmbient[] = {0.25f, 0.25f, 0.25f};
static const GLfloat standardDiffuse[] = {1.0f, 1.0f, 1.0f};
static const GLfloat standardSpecular[] = {1.0f, 1.0f, 1.0f};
static const GLfloat standardShininess = 150.0f;


void glPrintText( int x, int y , int w , int h , const std::string &text , const std::vector < double > &nums );
void glPrintText(int _x, int _y, int _width, int _height, const std::string &text );

// A useful define for turning two lights on
#define BLUEREDLIGHTS \
glEnable(GL_LIGHT0); \
glEnable(GL_LIGHT1); \
glLightfv(GL_LIGHT0, GL_DIFFUSE, light0_diffuse); \
glLightfv(GL_LIGHT0, GL_POSITION, light0_position); \
glLightfv(GL_LIGHT1, GL_DIFFUSE, light1_diffuse); \
glLightfv(GL_LIGHT1, GL_POSITION, light1_position); \
glLightfv(GL_LIGHT0, GL_SPECULAR, standardSpecular); \
glLightfv(GL_LIGHT1, GL_SPECULAR, standardSpecular);

#define WHITELIGHT \
   glMaterialfv(GL_FRONT, GL_AMBIENT, no_mat); \
   glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse); \
   glMaterialfv(GL_FRONT, GL_SPECULAR, standardSpecular ); \
   glMaterialfv(GL_FRONT, GL_SHININESS, low_shininess ); \
   glColor4f(0.5, 0.5, 0.5, 0.95); \
   glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

#define TRANSLUCENT \
   glMaterialfv(GL_FRONT, GL_AMBIENT, no_mat); \
   glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse); \
   glMaterialfv(GL_FRONT, GL_SPECULAR, standardSpecular ); \
   glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess); \
   glMaterialfv(GL_FRONT, GL_EMISSION, no_mat); \
   glColor4f(0.8, 0.8, 0.8, 0.8); \
   glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

void beginOrtho();
void endOrtho();
void circleMask( double circleCenterX, double circleCenterY, double circleRadius );
void circleMask2( double circleCenterX, double circleCenterY, double circleRadius );
Eigen::Vector3d project(const Eigen::Vector3d &);
void drawEllipse(double radiusX, double radiusY, double focalDistance, double minAngle=0.0, double maxAngle=6.28);
void drawCylinder(double radius, double x0, double y0, double z0, double x1, double y1, double z1, int quality, int type);
void drawCylinderElliptic(double radiusX, double height, double radiusZ, double ds=0.01, bool fullCylinder=false);
void drawParaboloid(double c, double rMin, double rMax, int nStepsX, int nStepsZ);
#define getGLerrors() (glError(__FILE__,__LINE__))
void glError(const char *file, int line);

GLuint loadTexture(std::string &imageNameFile, GLint internalFormat=GL_RGB);
GLubyte* generateCircles(int width, int height, int ncircles, int minRadius, int maxRadius, bool addRandomNoise=false, double noiseDensity=0, bool usePolkaDots=true);
GLubyte* generateCheckerboard(int width, int height, int tileSquareSize);
GLuint generateCirclesTexture(int width, int height,  int ncircles, int minRadius=10, int maxRadius=40, bool isSpaceFilling=false, bool addRandomNoise=false, double noiseDensity=0.0,bool usePolkaDots=true);

GLubyte* generateCirclesSpaceFilling(int width, int height);
GLuint generateCheckerboardTexture(int width, int height, int tileWidth, int tileHeight);

void drawEllipsoid(double x0, double y0, double z0, double x1, double y1, double z1);
void drawEllipsoid(const Eigen::Vector3d &p0, const Eigen::Vector3d &p1 );
void drawFrustum(const double * projectionMatrix, const double *inverseModelViewMatrix);
void drawFrustum(const Eigen::Projective3d &ProjectionMatrix, const Eigen::Affine3d &InverseModelViewMatrix);
void drawCamera();

// vertices for camera
static GLfloat cameraVertices[] = {
    0.500000f, -0.350000f, 0.000000f, 0.500000f, -0.350000f, 0.000000f, 0.500000f, -0.350000f, 0.000000f,
    -0.500000f, -0.350000f, 0.000000f, -0.500000f, -0.350000f, 0.000000f,
    -0.500000f, -0.350000f, 0.000000f, -0.500000f, 0.350000f, 0.000000f,
    -0.500000f, 0.350000f, 0.000000f, -0.500000f, 0.350000f, 0.000000f,
    0.500000f, 0.350000f, 0.000000f, 0.500000f, 0.350000f, 0.000000f,
    0.500000f, 0.350000f, 0.000000f, -0.500000f, 0.350000f, 0.300000f,
    -0.500000f, 0.350000f, 0.300000f, -0.500000f, 0.350000f, 0.300000f,
    0.500000f, 0.350000f, 0.300000f, 0.500000f, 0.350000f, 0.300000f,
    0.500000f, 0.350000f, 0.300000f, -0.500000f, -0.350000f, 0.300000f,
    -0.500000f, -0.350000f, 0.300000f, -0.500000f, -0.350000f, 0.300000f,
    0.500000f, -0.350000f, 0.300000f, 0.500000f, -0.350000f, 0.300000f,
    0.500000f, -0.350000f, 0.300000f, -0.285317f, 0.0927050f, 0.000000f,
    -0.242705f, 0.176336f, 0.000000f, -0.242705f, 0.176336f, -0.300000f,
    -0.242705f, 0.176336f, -0.300000f, -0.285317f, 0.0927050f, -0.300000f,
    -0.285317f, 0.0927050f, -0.300000f, -0.176336f, 0.242705f, 0.000000f,
    -0.176336f, 0.242705f, -0.300000f, -0.176336f, 0.242705f, -0.300000f,
    -0.0927050f, 0.285317f, 0.000000f, -0.0927050f, 0.285317f, -0.300000f,
    -0.0927050f, 0.285317f, -0.300000f, 0.000000f, 0.300000f, 0.000000f,
    0.000000f, 0.300000f, -0.300000f, 0.000000f, 0.300000f, -0.300000f,
    0.0927050f, 0.285317f, 0.000000f, 0.0927050f, 0.285317f, -0.300000f,
    0.0927050f, 0.285317f, -0.300000f, 0.176336f, 0.242705f, 0.000000f,
    0.176336f, 0.242705f, -0.300000f, 0.176336f, 0.242705f, -0.300000f,
    0.242705f, 0.176336f, 0.000000f, 0.242705f, 0.176336f, -0.300000f,
    0.242705f, 0.176336f, -0.300000f, 0.285317f, 0.0927050f, 0.000000f,
    0.285317f, 0.0927050f, -0.300000f, 0.285317f, 0.0927050f, -0.300000f,
    0.300000f, 0.000000f, 0.000000f, 0.300000f, 0.000000f, -0.300000f,
    0.300000f, 0.000000f, -0.300000f, 0.285317f, -0.0927050f, 0.000000f,
    0.285317f, -0.0927050f, -0.300000f, 0.285317f, -0.0927050f, -0.300000f,
    0.242705f, -0.176336f, 0.000000f, 0.242705f, -0.176336f, -0.300000f,
    0.242705f, -0.176336f, -0.300000f, 0.176336f, -0.242705f, 0.000000f,
    0.176336f, -0.242705f, -0.300000f, 0.176336f, -0.242705f, -0.300000f,
    0.0927050f, -0.285317f, 0.000000f, 0.0927050f, -0.285317f, -0.300000f,
    0.0927050f, -0.285317f, -0.300000f, 0.000000f, -0.300000f, 0.000000f,
    0.000000f, -0.300000f, -0.300000f, 0.000000f, -0.300000f, -0.300000f,
    -0.0927050f, -0.285317f, 0.000000f, -0.0927050f, -0.285317f, -0.300000f,
    -0.0927050f, -0.285317f, -0.300000f, -0.176336f, -0.242705f, 0.000000f,
    -0.176336f, -0.242705f, -0.300000f, -0.176336f, -0.242705f, -0.300000f,
    -0.242705f, -0.176336f, 0.000000f, -0.242705f, -0.176336f, -0.300000f,
    -0.242705f, -0.176336f, -0.300000f, -0.285317f, -0.0927050f, 0.000000f,
    -0.285317f, -0.0927050f, -0.300000f, -0.285317f, -0.0927050f, -0.300000f,
    -0.300000f, 0.000000f, 0.000000f, -0.300000f, 0.000000f, -0.300000f,
    -0.300000f, 0.000000f, -0.300000f, -0.194164f, 0.141069f, -0.300000f,
    -0.194164f, 0.141069f, -0.300000f, -0.228254f, 0.0741640f, -0.300000f,
    -0.228254f, 0.0741640f, -0.300000f, -0.141069f, 0.194164f, -0.300000f,
    -0.141069f, 0.194164f, -0.300000f, -0.0741640f, 0.228254f, -0.300000f,
    -0.0741640f, 0.228254f, -0.300000f, 0.000000f, 0.240000f, -0.300000f,
    0.000000f, 0.240000f, -0.300000f, 0.0741640f, 0.228254f, -0.300000f,
    0.0741640f, 0.228254f, -0.300000f, 0.141069f, 0.194164f, -0.300000f,
    0.141069f, 0.194164f, -0.300000f, 0.194164f, 0.141069f, -0.300000f,
    0.194164f, 0.141069f, -0.300000f, 0.228254f, 0.0741640f, -0.300000f,
    0.228254f, 0.0741640f, -0.300000f, 0.240000f, 0.000000f, -0.300000f,
    0.240000f, 0.000000f, -0.300000f, 0.228254f, -0.0741640f, -0.300000f,
    0.228254f, -0.0741640f, -0.300000f, 0.194164f, -0.141069f, -0.300000f,
    0.194164f, -0.141069f, -0.300000f, 0.141069f, -0.194164f, -0.300000f,
    0.141069f, -0.194164f, -0.300000f, 0.0741640f, -0.228254f, -0.300000f,
    0.0741640f, -0.228254f, -0.300000f, 0.000000f, -0.240000f, -0.300000f,
    0.000000f, -0.240000f, -0.300000f, -0.0741640f, -0.228254f, -0.300000f,
    -0.0741640f, -0.228254f, -0.300000f, -0.141068f, -0.194164f, -0.300000f,
    -0.141068f, -0.194164f, -0.300000f, -0.194164f, -0.141068f, -0.300000f,
    -0.194164f, -0.141068f, -0.300000f, -0.228254f, -0.0741640f, -0.300000f,
    -0.228254f, -0.0741640f, -0.300000f, -0.240000f, 0.000000f, -0.300000f,
    -0.240000f, 0.000000f, -0.300000f, -0.228254f, 0.0741640f, 0.000000f,
    -0.194164f, 0.141069f, 0.000000f, -0.141069f, 0.194164f, 0.000000f,
    -0.0741640f, 0.228254f, 0.000000f, 0.000000f, 0.240000f, 0.000000f,
    0.0741640f, 0.228254f, 0.000000f, 0.141069f, 0.194164f, 0.000000f,
    0.194164f, 0.141069f, 0.000000f, 0.228254f, 0.0741640f, 0.000000f,
    0.240000f, 0.000000f, 0.000000f, 0.228254f, -0.0741640f, 0.000000f,
    0.194164f, -0.141069f, 0.000000f, 0.141069f, -0.194164f, 0.000000f,
    0.0741640f, -0.228254f, 0.000000f, 0.000000f, -0.240000f, 0.000000f,
    -0.0741640f, -0.228254f, 0.000000f, -0.141068f, -0.194164f, 0.000000f,
    -0.194164f, -0.141068f, 0.000000f, -0.228254f, -0.0741640f, 0.000000f,
    -0.240000f, 0.000000f, 0.000000f, 0.306365f, 0.350000f, 0.164697f,
    0.313467f, 0.350000f, 0.178636f, 0.313467f, 0.370000f, 0.178636f,
    0.313467f, 0.370000f, 0.178636f, 0.306365f, 0.370000f, 0.164697f,
    0.306365f, 0.370000f, 0.164697f, 0.324529f, 0.350000f, 0.189697f,
    0.324529f, 0.370000f, 0.189697f, 0.324529f, 0.370000f, 0.189697f,
    0.338467f, 0.350000f, 0.196799f, 0.338467f, 0.370000f, 0.196799f,
    0.338467f, 0.370000f, 0.196799f, 0.353918f, 0.350000f, 0.199246f,
    0.353918f, 0.370000f, 0.199246f, 0.353918f, 0.370000f, 0.199246f,
    0.369369f, 0.350000f, 0.196799f, 0.369369f, 0.370000f, 0.196799f,
    0.369369f, 0.370000f, 0.196799f, 0.383307f, 0.350000f, 0.189697f,
    0.383307f, 0.370000f, 0.189697f, 0.383307f, 0.370000f, 0.189697f,
    0.394369f, 0.350000f, 0.178636f, 0.394369f, 0.370000f, 0.178636f,
    0.394369f, 0.370000f, 0.178636f, 0.401471f, 0.350000f, 0.164697f,
    0.401471f, 0.370000f, 0.164697f, 0.401471f, 0.370000f, 0.164697f,
    0.403918f, 0.350000f, 0.149246f, 0.403918f, 0.370000f, 0.149246f,
    0.403918f, 0.370000f, 0.149246f, 0.401471f, 0.350000f, 0.133795f,
    0.401471f, 0.370000f, 0.133795f, 0.401471f, 0.370000f, 0.133795f,
    0.394369f, 0.350000f, 0.119857f, 0.394369f, 0.370000f, 0.119857f,
    0.394369f, 0.370000f, 0.119857f, 0.383307f, 0.350000f, 0.108795f,
    0.383307f, 0.370000f, 0.108795f, 0.383307f, 0.370000f, 0.108795f,
    0.369369f, 0.350000f, 0.101693f, 0.369369f, 0.370000f, 0.101693f,
    0.369369f, 0.370000f, 0.101693f, 0.353918f, 0.350000f, 0.0992460f,
    0.353918f, 0.370000f, 0.0992460f, 0.353918f, 0.370000f, 0.0992460f,
    0.338467f, 0.350000f, 0.101693f, 0.338467f, 0.370000f, 0.101693f,
    0.338467f, 0.370000f, 0.101693f, 0.324529f, 0.350000f, 0.108795f,
    0.324529f, 0.370000f, 0.108795f, 0.324529f, 0.370000f, 0.108795f,
    0.313467f, 0.350000f, 0.119857f, 0.313467f, 0.370000f, 0.119857f,
    0.313467f, 0.370000f, 0.119857f, 0.306365f, 0.350000f, 0.133795f,
    0.306365f, 0.370000f, 0.133795f, 0.306365f, 0.370000f, 0.133795f,
    0.303918f, 0.350000f, 0.149246f, 0.303918f, 0.370000f, 0.149246f,
    0.303918f, 0.370000f, 0.149246f, 0.353918f, 0.370000f, 0.149246f
};
static GLfloat cameraNormals[] = {
    1.00000f, 0.000000f, 0.000000f, 0.000000f, -1.00000f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    -1.00000f, 0.000000f, 0.000000f, 0.000000f, -1.00000f, 0.000000f,
    0.000000f, 0.000000f, -1.00000f, -1.00000f, 0.000000f, 0.000000f,
    0.000000f, 1.00000f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    1.00000f, 0.000000f, 0.000000f, 0.000000f, 1.00000f, 0.000000f,
    0.000000f, 0.000000f, -1.00000f, -1.00000f, 0.000000f, 0.000000f,
    0.000000f, 0.000000f, 1.00000f, 0.000000f, 1.00000f, 0.000000f,
    1.00000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.00000f,
    0.000000f, 1.00000f, 0.000000f, -1.00000f, 0.000000f, 0.000000f,
    0.000000f, -1.00000f, 0.000000f, 0.000000f, 0.000000f, 1.00000f,
    1.00000f, 0.000000f, 0.000000f, 0.000000f, -1.00000f, 0.000000f,
    0.000000f, 0.000000f, 1.00000f, -0.951057f, 0.309016f, 0.000000f,
    -0.809017f, 0.587785f, 0.000000f, -0.809017f, 0.587785f, 0.000000f,
    0.000000f, 0.000000f, -1.00000f, -0.951057f, 0.309016f, 0.000000f,
    0.000000f, 0.000000f, -1.00000f, -0.587785f, 0.809017f, 0.000000f,
    -0.587785f, 0.809017f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    -0.309017f, 0.951057f, 0.000000f, -0.309017f, 0.951057f, 0.000000f,
    0.000000f, 0.000000f, -1.00000f, 0.000000f, 1.00000f, 0.000000f,
    0.000000f, 1.00000f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    0.309017f, 0.951056f, 0.000000f, 0.309017f, 0.951056f, 0.000000f,
    0.000000f, 0.000000f, -1.00000f, 0.587785f, 0.809017f, 0.000000f,
    0.587785f, 0.809017f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    0.809017f, 0.587785f, 0.000000f, 0.809017f, 0.587785f, 0.000000f,
    0.000000f, 0.000000f, -1.00000f, 0.951057f, 0.309017f, 0.000000f,
    0.951057f, 0.309017f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    1.00000f, 0.000000f, 0.000000f, 1.00000f, 0.000000f, 0.000000f,
    0.000000f, 0.000000f, -1.00000f, 0.951057f, -0.309017f, 0.000000f,
    0.951057f, -0.309017f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    0.809017f, -0.587785f, 0.000000f, 0.809017f, -0.587785f, 0.000000f,
    0.000000f, 0.000000f, -1.00000f, 0.587785f, -0.809017f, 0.000000f,
    0.587785f, -0.809017f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    0.309017f, -0.951057f, 0.000000f, 0.309017f, -0.951057f, 0.000000f,
    0.000000f, 0.000000f, -1.00000f, 0.000000f, -1.00000f, 0.000000f,
    0.000000f, -1.00000f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    -0.309017f, -0.951056f, 0.000000f, -0.309017f, -0.951056f, 0.000000f,
    0.000000f, 0.000000f, -1.00000f, -0.587785f, -0.809017f, 0.000000f,
    -0.587785f, -0.809017f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    -0.809017f, -0.587785f, 0.000000f, -0.809017f, -0.587785f, 0.000000f,
    0.000000f, 0.000000f, -1.00000f, -0.951057f, -0.309017f, 0.000000f,
    -0.951057f, -0.309017f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    -1.00000f, -1.00000e-006f, 0.000000f, -1.00000f, -1.00000e-006f, 0.000000f,
    0.000000f, 0.000000f, -1.00000f, 0.000000f, 0.000000f, -1.00000f,
    0.809017f, -0.587785f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    0.951057f, -0.309016f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    0.587785f, -0.809017f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    0.309017f, -0.951056f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    0.000000f, -1.00000f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    -0.309017f, -0.951056f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    -0.587785f, -0.809017f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    -0.809017f, -0.587785f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    -0.951057f, -0.309017f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    -1.00000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    -0.951057f, 0.309017f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    -0.809017f, 0.587785f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    -0.587785f, 0.809017f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    -0.309017f, 0.951057f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    0.000000f, 1.00000f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    0.309017f, 0.951056f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    0.587785f, 0.809017f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    0.809017f, 0.587785f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    0.951057f, 0.309017f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    1.00000f, 1.00000e-006f, 0.000000f, 0.951057f, -0.309016f, 0.000000f,
    0.809017f, -0.587785f, 0.000000f, 0.587785f, -0.809017f, 0.000000f,
    0.309017f, -0.951056f, 0.000000f, 0.000000f, -1.00000f, 0.000000f,
    -0.309017f, -0.951056f, 0.000000f, -0.587785f, -0.809017f, 0.000000f,
    -0.809017f, -0.587785f, 0.000000f, -0.951057f, -0.309017f, 0.000000f,
    -1.00000f, 0.000000f, 0.000000f, -0.951057f, 0.309017f, 0.000000f,
    -0.809017f, 0.587785f, 0.000000f, -0.587785f, 0.809017f, 0.000000f,
    -0.309017f, 0.951057f, 0.000000f, 0.000000f, 1.00000f, 0.000000f,
    0.309017f, 0.951056f, 0.000000f, 0.587785f, 0.809017f, 0.000000f,
    0.809017f, 0.587785f, 0.000000f, 0.951057f, 0.309017f, 0.000000f,
    1.00000f, 1.00000e-006f, 0.000000f, -0.951057f, 0.000000f, 0.309017f,
    -0.809017f, 0.000000f, 0.587786f, -0.809017f, 0.000000f, 0.587786f,
    0.000000f, 1.00000f, -1.00000e-006f, -0.951057f, 0.000000f, 0.309017f,
    0.000000f, 1.00000f, -2.00000e-006f, -0.587785f, 0.000000f, 0.809017f,
    -0.587785f, 0.000000f, 0.809017f, 0.000000f, 1.00000f, 0.000000f,
    -0.309016f, 0.000000f, 0.951057f, -0.309016f, 0.000000f, 0.951057f,
    0.000000f, 1.00000f, 0.000000f, 1.00000e-006f, 0.000000f, 1.00000f,
    1.00000e-006f, 0.000000f, 1.00000f, 0.000000f, 1.00000f, 0.000000f,
    0.309018f, 0.000000f, 0.951056f, 0.309018f, 0.000000f, 0.951056f,
    0.000000f, 1.00000f, 0.000000f, 0.587785f, 0.000000f, 0.809017f,
    0.587785f, 0.000000f, 0.809017f, 0.000000f, 1.00000f, 0.000000f,
    0.809017f, 0.000000f, 0.587786f, 0.809017f, 0.000000f, 0.587786f,
    0.000000f, 1.00000f, 0.000000f, 0.951057f, 0.000000f, 0.309017f,
    0.951057f, 0.000000f, 0.309017f, 0.000000f, 1.00000f, 1.00000e-006f,
    1.00000f, 0.000000f, 0.000000f, 1.00000f, 0.000000f, 0.000000f,
    0.000000f, 1.00000f, 2.00000e-006f, 0.951057f, 0.000000f, -0.309017f,
    0.951057f, 0.000000f, -0.309017f, 0.000000f, 1.00000f, 2.00000e-006f,
    0.809017f, 0.000000f, -0.587786f, 0.809017f, 0.000000f, -0.587786f,
    0.000000f, 1.00000f, 1.00000e-006f, 0.587785f, 0.000000f, -0.809017f,
    0.587785f, 0.000000f, -0.809017f, 0.000000f, 1.00000f, 0.000000f,
    0.309017f, 0.000000f, -0.951056f, 0.309017f, 0.000000f, -0.951056f,
    0.000000f, 1.00000f, 0.000000f, 0.000000f, 0.000000f, -1.00000f,
    0.000000f, 0.000000f, -1.00000f, 0.000000f, 1.00000f, 0.000000f,
    -0.309017f, 0.000000f, -0.951056f, -0.309017f, 0.000000f, -0.951056f,
    0.000000f, 1.00000f, 0.000000f, -0.587786f, 0.000000f, -0.809017f,
    -0.587786f, 0.000000f, -0.809017f, 0.000000f, 1.00000f, 0.000000f,
    -0.809017f, 0.000000f, -0.587785f, -0.809017f, 0.000000f, -0.587785f,
    0.000000f, 1.00000f, 0.000000f, -0.951056f, 0.000000f, -0.309018f,
    -0.951056f, 0.000000f, -0.309018f, 0.000000f, 1.00000f, -1.00000e-006f,
    -1.00000f, 0.000000f, -1.00000e-006f, -1.00000f, 0.000000f, -1.00000e-006f,
    0.000000f, 1.00000f, -2.00000e-006f, 0.000000f, 1.00000f, 0.000000f
};
static GLint cameraIndices[] = {
    2, 5, 11, 5, 8, 10, 7, 17, 7, 14, 16, 13, 23, 13, 20, 22,
    19, 1, 19, 4, 3, 18, 6, 18, 12, 21, 0, 15, 0, 9, 203, 149,
    204, 147, 204, 152, 204, 155, 204, 158, 204, 161, 204, 164, 204, 167, 204, 170,
    204, 173, 204, 176, 204, 179, 204, 182, 204, 185, 204, 188, 204, 191, 204, 194,
    204, 197, 204, 200, 203, 144, 148, 144, 202, 201, 199, 198, 196, 195, 193, 192,
    190, 189, 187, 186, 184, 183, 181, 180, 178, 177, 175, 174, 172, 171, 169, 168,
    166, 165, 163, 162, 160, 159, 157, 156, 154, 153, 151, 150, 146, 145, 148, 145,
    144, 123, 87, 124, 87, 125, 85, 126, 89, 127, 91, 128, 93, 129, 95, 130,
    97, 131, 99, 132, 101, 133, 103, 134, 105, 135, 107, 136, 109, 137, 111, 138,
    113, 139, 115, 140, 117, 141, 119, 142, 121, 143, 123, 143, 124, 29, 86, 29,
    122, 83, 120, 80, 118, 77, 116, 74, 114, 71, 112, 68, 110, 65, 108, 62,
    106, 59, 104, 56, 102, 53, 100, 50, 98, 47, 96, 44, 94, 41, 92, 38,
    90, 35, 88, 32, 84, 27, 86, 27, 29, 24, 28, 24, 82, 81, 79, 78,
    76, 75, 73, 72, 70, 69, 67, 66, 64, 63, 61, 60, 58, 57, 55, 54,
    52, 51, 49, 48, 46, 45, 43, 42, 40, 39, 37, 36, 34, 33, 31, 30,
    26, 25, 28, 25, 24
};
#endif /* _GLUTILS_H */
